@page "/customerlist"

@using CustomerBlazorServerApp.Data
@using CustomerBlazorServerApp.Services;
@inject CustomerService customerService;
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Customer Order List</PageTitle>


        <h1>Customer Details</h1>

        <p>This component demonstrates fetching data from a service.</p>

        @if (co?.customers == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <button class="btn btn-primary button" @onclick="NavigateToCustomer">Add Customer</button>
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Address</th>
                        <th>Phone</th>
                        <th>Product Name</th>
                        <th>Tracking ID</th>
                        <th>Tracking Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in co.customers)
                    {
                        <tr>
                            <td>@customer.Id</td>
                            <td>@customer.Name</td>
                            <td>@customer.Address</td>
                            <td>@customer.Phone</td>
                            <td>@customer.ProductName</td>
                            <td>@customer.TrackingId</td>
                            <td>@customer.TrackingStatus</td>
                            <td>
                                <button class="btn btn-secondary btn-sm" @onclick="@(() => EditCustomer(customer.Id))">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteCustomer(customer.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
           
        }

@code {
    private CustomerOrder co;

    protected override async Task OnInitializedAsync()
    {
        co = (await customerService.GetAllCustomerData());
    }
    private void NavigateToCustomer()
    {
        Navigation.NavigateTo("/add-customer");
    }
    private void EditCustomer(int id)
    {
        Navigation.NavigateTo($"/edit-customer/{id}");
    }
    private async Task DeleteCustomer(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        
        if (confirmed)
        {
            await customerService.DeleteCustomer(id);
            co.customers.RemoveAll(c => c.Id == id);
            await JS.InvokeAsync<object>("alert", "Customer deleted successfully!");
            StateHasChanged();
        }
        else
        {
            // Optionally log or handle the cancellation
            //_logger.LogInformation("Deletion of customer with ID: {CustomerId} was cancelled.", id);
        }
    }
}
